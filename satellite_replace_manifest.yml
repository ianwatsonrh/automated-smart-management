---
# this will be replaced with the play that downloads the manifest directly from sub mgr
#- name: retrieve manifest from s3 bucket
#  hosts: localhost
#  gather_facts: no
#  tasks: 
#    - name: Save manifest from s3 bucket
#      amazon.aws.aws_s3:
#        bucket: "{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }}.private"
#        mode: get
#        object: "{{ ec2_name_prefix }}-manifest.zip"
#        dest: "{{ playbook_dir }}/{{ ec2_name_prefix|lower }}-manifest.zip"
#        region: "{{ ec2_region }}"
- name: get satellite manifest from account
  hosts: localhost
  vars:
  gather_facts: no

  tasks:
    - name: get access token
      uri:
        url: "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token"
        method: POST
        return_content: True
        body_format: form-urlencoded
        headers:
            accept: application/json
        body:
          grant_type: refresh_token
          client_id: rhsm-api
          refresh_token: "{{ offline_token }}"
          validate_certs: False
      register: access_token_reponse

    - name: Get manifest list
      uri:
        url: "https://subscription.rhsm.redhat.com/subscription/owners/{{ org_id }}/consumers?type=Satellite"
#        url: "https://api.access.redhat.com/management/v1/allocations?type=Satellite"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token_reponse.json.access_token }}"
          Content-Type: "application/json"
          accept: application/json
        status_code: 200
        return_content: yes
        validate_certs: false
        force_basic_auth: yes
      register: manifests


    - name: get manifest uuid
      set_fact:
        manifest_uuid: "{{ manifests | json_query(get_manifest_id) }}"
      vars:
        get_manifest_id: "json[?name == '{{ manifest_name }}'].uuid"

    - name: Download  manifest
      get_url:
        url: "https://subscription.rhsm.redhat.com/subscription/consumers/{{ manifest_uuid[0] }}/export"
        dest: "{{ playbook_dir }}/manifest_insights.zip"
        validate_certs: false
        headers:
          Authorization: "Bearer {{ access_token_reponse.json.access_token }}"
          Content-Type: "application/zip"
      delay: 60




- name: remove manifest
  hosts: "{{ HOSTS | default('satellite.example.com') }}"
  connection: local
  gather_facts: no
  vars:
#    refresh_satellite_manifest: no
    refresh_timeout: 14400
    refresh_retry_interval: 15
 
  tasks:
    - name: delete existing  manifest
      redhat.satellite.subscription_manifest:
        organization: "Default Organization"
        state: absent
      async: "{{ refresh_timeout }}"
      poll: 0
      register: refresh_async
#      when: refresh_satellite_manifest
 
 
- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  become: true
  vars:
#    refresh_satellite_manifest: no
    refresh_timeout: 14400
    refresh_retry_interval: 15
 
  tasks:
    - name: >
        Watch the Satellite production.log until ManifestRefresh result ==> success appears before continuing...
      wait_for:
        path: /var/log/foreman/production.log
        search_regex: "^.*ManifestDelete.*state\ changed.*\ stopped\ \ result.*\ success"
        timeout: 1500
        sleep: 20
#      when: refresh_satellite_manifest


- name: add new manifest
  hosts: "{{ HOSTS | default('satellite.example.com') }}"
  connection: local
  gather_facts: no
  vars:
#    refresh_satellite_manifest: no
    refresh_timeout: 14400
    refresh_retry_interval: 15

  tasks:
    - name: refresh manifest
      redhat.satellite.subscription_manifest:
        organization: "Default Organization"
        state: present
        manifest_path: "{{ playbook_dir }}/manifest_insights.zip"
      async: "{{ refresh_timeout }}"
      poll: 0
      register: refresh_async
#      when: refresh_satellite_manifest
      delegate_to: localhost

- hosts: "{{ HOSTS | default('satellite.example.com') }}"
  become: true
  vars:
#    refresh_satellite_manifest: no
    refresh_timeout: 14400
    refresh_retry_interval: 15

  tasks:
    - name: >
        Watch the Satellite production.log until ManifestRefresh result ==> success appears before continuing...
      wait_for:
        path: /var/log/foreman/production.log
        search_regex: "^.*ManifestImport.*state\ changed.*\ stopped\ \ result.*\ success"
        timeout: 1500
        sleep: 20
#      when: refresh_satellite_manifest


        
      
